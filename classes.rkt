#lang racket

(provide make-car)
(provide make-ball)

(require 2htdp/image)
(provide make-car)
(provide make-ball)

(define car-width 100)
(define car-length 50)

(define (make-car pos theta name color)
  (let ((image (overlay/align "right" "middle" (rectangle (/ car-width 5) car-length "solid" "black")(rectangle car-width car-length "solid" color)))
        (velocity '(0 0))
        (boost 0))
    (define (update lst)
      (set! pos (car lst))
      (set! velocity (cadr lst)))
    (define (dispatch m)
      (cond ((eq? m 'get-x) (car pos))
            ((eq? m 'get-y) (cadr pos))
            ((eq? m 'get-pos) pos)
            ((eq? m 'get-velo) velocity)
            ((eq? m 'update-car) update)
            ((eq? m 'get-theta) theta)
            ((eq? m 'get-image) (rotate theta image))
            ((eq? m 'get-name) name)
            (else "wat")))
    dispatch))

(define (make-ball pos radius)
  (let ((image (circle radius "solid" "black"))
        (velocity '(0 0)))
    (define (update lst)
      (set! pos (car lst))
      (set! velocity (cadr lst)))
    (define (dispatch m)
      (cond ((eq? m 'get-x) (car pos))
            ((eq? m 'get-y) (cadr pos))
            ((eq? m 'get-pos) pos)
            ((eq? m 'get-velo) velocity)
            ((eq? m 'update-ball) update)
            ((eq? m 'get-image) image)
            (else "wat")))
    dispatch))
    
